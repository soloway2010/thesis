-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_00(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0x - iv1x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_00(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0y - iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_00(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0z - iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_01(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0x - iv1x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -1;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_01(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0y - iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -1;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_01(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0z - iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -1;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_10(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0x - iv1x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 1;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_10(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0y - iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 1;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_10(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0z - iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = 1;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_11(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0x - iv1x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_11(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0y - iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_11(const InputVertex &v0, const InputVertex &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0z - iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_00(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0x + iv0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_00(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0y + iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_00(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0z + iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_01(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0x + iv0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_01(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0y + iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_01(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0z + iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_10(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0x + iv0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 1 - coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_10(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0y + iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 1 - coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_10(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0z + iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = 1 - coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_11(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0x + iv0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 1 - coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_11(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0y + iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 1 - coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_11(const InputVertex &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -coeffV1ePower0z + iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = 1 - coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_00(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0x - coeffV1ePower0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1x - coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2x - coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3x - coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_00(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0y - coeffV1ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1y - coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2y - coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3y - coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_00(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z - coeffV1ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z - coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z - coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z - coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_01(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0x - coeffV1ePower0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1x - coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2x - coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3x - coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_01(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0y - coeffV1ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1y - coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2y - coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3y - coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_01(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z - coeffV1ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z - coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z - coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z - coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_10(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0x - coeffV1ePower0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1x - coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2x - coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3x - coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_10(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0y - coeffV1ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1y - coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2y - coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3y - coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_10(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z - coeffV1ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z - coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z - coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z - coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_x_11(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0x - coeffV1ePower0x;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1x - coeffV1ePower1x;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2x - coeffV1ePower2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3x - coeffV1ePower3x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_y_11(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0y - coeffV1ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1y - coeffV1ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2y - coeffV1ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3y - coeffV1ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient1D_z_11(const VertexFromIntersection &v0, const VertexFromIntersection &v1) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z - coeffV1ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z - coeffV1ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z - coeffV1ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z - coeffV1ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_000(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -((-iv0z + iv1z)*(-iv0y + iv2y)) + (-iv0y + iv1y)*(-iv0z + iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_000(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = (-iv0z + iv1z)*(-iv0x + iv2x) - (-iv0x + iv1x)*(-iv0z + iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_000(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -((-iv0y + iv1y)*(-iv0x + iv2x)) + (-iv0x + iv1x)*(-iv0y + iv2y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_001(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(-iv0y + iv1y)) - iv0y*(iv0z - iv1z) + (iv0z - iv1z)*iv2y + (-iv0y + iv1y)*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z - iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv0y + iv1y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_001(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(iv0x - iv1x)) - iv0x*(-iv0z + iv1z) + (-iv0z + iv1z)*iv2x + (iv0x - iv1x)*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv0z + iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0x - iv1x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_001(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0y*(-iv0x + iv1x)) - iv0x*(iv0y - iv1y) + (iv0y - iv1y)*iv2x + (-iv0x + iv1x)*iv2y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0y - iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv0x + iv1x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_010(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(iv0y - iv2y)) + iv1z*(iv0y - iv2y) - iv0y*(-iv0z + iv2z) + iv1y*(-iv0z + iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv0z + iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y - iv2y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_010(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(-iv0x + iv2x)) + iv1z*(-iv0x + iv2x) - iv0x*(iv0z - iv2z) + iv1x*(iv0z - iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z - iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv0x + iv2x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_010(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0y*(iv0x - iv2x)) + iv1y*(iv0x - iv2x) - iv0x*(-iv0y + iv2y) + iv1x*(-iv0y + iv2y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv0y + iv2y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0x - iv2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_011(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y) + iv0y*iv1z + iv0z*iv2y - iv1z*iv2y - iv0y*iv2z + iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv1z + iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv1y - iv2y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_011(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0z*iv1x - iv0x*iv1z - iv0z*iv2x + iv1z*iv2x + iv0x*iv2z - iv1x*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv1z - iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv1x + iv2x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_011(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0y*iv1x) + iv0x*iv1y + iv0y*iv2x - iv1y*iv2x - iv0x*iv2y + iv1x*iv2y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv1y + iv2y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv1x - iv2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_100(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y) + iv0y*iv1z + iv0z*iv2y - iv1z*iv2y - iv0y*iv2z + iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv1z - iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv1y + iv2y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_100(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = iv0z*iv1x - iv0x*iv1z - iv0z*iv2x + iv1z*iv2x + iv0x*iv2z - iv1x*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv1z + iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv1x - iv2x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_100(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0y*iv1x) + iv0x*iv1y + iv0y*iv2x - iv1y*iv2x - iv0x*iv2y + iv1x*iv2y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv1y - iv2y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv1x + iv2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_101(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(iv0y - iv2y)) + iv1z*(iv0y - iv2y) - iv0y*(-iv0z + iv2z) + iv1y*(-iv0z + iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z - iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv0y + iv2y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_101(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(-iv0x + iv2x)) + iv1z*(-iv0x + iv2x) - iv0x*(iv0z - iv2z) + iv1x*(iv0z - iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv0z + iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0x - iv2x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_101(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0y*(iv0x - iv2x)) + iv1y*(iv0x - iv2x) - iv0x*(-iv0y + iv2y) + iv1x*(-iv0y + iv2y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0y - iv2y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv0x + iv2x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_110(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(-iv0y + iv1y)) - iv0y*(iv0z - iv1z) + (iv0z - iv1z)*iv2y + (-iv0y + iv1y)*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = 0;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv0z + iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y - iv1y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_110(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*(iv0x - iv1x)) - iv0x*(-iv0z + iv1z) + (-iv0z + iv1z)*iv2x + (iv0x - iv1x)*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z - iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = 0;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv0x + iv1x;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_110(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0y*(-iv0x + iv1x)) - iv0x*(iv0y - iv1y) + (iv0y - iv1y)*iv2x + (-iv0x + iv1x)*iv2y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv0y + iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0x - iv1x;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_111(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -((-iv0z + iv1z)*(-iv0y + iv2y)) + (-iv0y + iv1y)*(-iv0z + iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_111(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = (-iv0z + iv1z)*(-iv0x + iv2x) - (-iv0x + iv1x)*(-iv0z + iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_111(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -((-iv0y + iv1y)*(-iv0x + iv2x)) + (-iv0x + iv1x)*(-iv0y + iv2y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_000(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(-iv0y + iv1y) - iv0z*(-iv0y + iv1y) + coeffV2ePower0y*(iv0z - iv1z) - iv0y*(iv0z - iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1z*(-iv0y + iv1y) + coeffV2ePower1y*(iv0z - iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2z*(-iv0y + iv1y) + coeffV2ePower2y*(iv0z - iv1z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3z*(-iv0y + iv1y) + coeffV2ePower3y*(iv0z - iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_000(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(iv0x - iv1x) - iv0z*(iv0x - iv1x) + coeffV2ePower0x*(-iv0z + iv1z) - iv0x*(-iv0z + iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1z*(iv0x - iv1x) + coeffV2ePower1x*(-iv0z + iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2z*(iv0x - iv1x) + coeffV2ePower2x*(-iv0z + iv1z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3z*(iv0x - iv1x) + coeffV2ePower3x*(-iv0z + iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_000(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0y*(-iv0x + iv1x) - iv0y*(-iv0x + iv1x) + coeffV2ePower0x*(iv0y - iv1y) - iv0x*(iv0y - iv1y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1y*(-iv0x + iv1x) + coeffV2ePower1x*(iv0y - iv1y);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2y*(-iv0x + iv1x) + coeffV2ePower2x*(iv0y - iv1y);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3y*(-iv0x + iv1x) + coeffV2ePower3x*(iv0y - iv1y);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_001(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(-iv0y + iv1y) - iv0z*(-iv0y + iv1y) + coeffV2ePower0y*(iv0z - iv1z) - iv0y*(iv0z - iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1z*(-iv0y + iv1y) + coeffV2ePower1y*(iv0z - iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2z*(-iv0y + iv1y) + coeffV2ePower2y*(iv0z - iv1z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3z*(-iv0y + iv1y) + coeffV2ePower3y*(iv0z - iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_001(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(iv0x - iv1x) - iv0z*(iv0x - iv1x) + coeffV2ePower0x*(-iv0z + iv1z) - iv0x*(-iv0z + iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1z*(iv0x - iv1x) + coeffV2ePower1x*(-iv0z + iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2z*(iv0x - iv1x) + coeffV2ePower2x*(-iv0z + iv1z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3z*(iv0x - iv1x) + coeffV2ePower3x*(-iv0z + iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_001(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0y*(-iv0x + iv1x) - iv0y*(-iv0x + iv1x) + coeffV2ePower0x*(iv0y - iv1y) - iv0x*(iv0y - iv1y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1y*(-iv0x + iv1x) + coeffV2ePower1x*(iv0y - iv1y);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2y*(-iv0x + iv1x) + coeffV2ePower2x*(iv0y - iv1y);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3y*(-iv0x + iv1x) + coeffV2ePower3x*(iv0y - iv1y);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_010(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0z*iv0y) + coeffV2ePower0y*iv0z + coeffV2ePower0z*iv1y - iv0z*iv1y - coeffV2ePower0y*iv1z + iv0y*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV2ePower1z*iv0y) + coeffV2ePower1y*iv0z + coeffV2ePower1z*iv1y - coeffV2ePower1y*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower0z - coeffV2ePower2z*iv0y - iv0z + coeffV2ePower2y*iv0z + coeffV2ePower2z*iv1y - coeffV2ePower2y*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV2ePower0y + coeffV2ePower1z + iv0y - coeffV2ePower3z*iv0y + coeffV2ePower3y*iv0z + coeffV2ePower3z*iv1y - coeffV2ePower3y*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV2ePower1y + coeffV2ePower2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV2ePower2y + coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_010(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*iv0x - coeffV2ePower0x*iv0z - coeffV2ePower0z*iv1x + iv0z*iv1x + coeffV2ePower0x*iv1z - iv0x*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV2ePower0z + coeffV2ePower1z*iv0x + iv0z - coeffV2ePower1x*iv0z - coeffV2ePower1z*iv1x + coeffV2ePower1x*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV2ePower1z + coeffV2ePower2z*iv0x - coeffV2ePower2x*iv0z - coeffV2ePower2z*iv1x + coeffV2ePower2x*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower0x - coeffV2ePower2z - iv0x + coeffV2ePower3z*iv0x - coeffV2ePower3x*iv0z - coeffV2ePower3z*iv1x + coeffV2ePower3x*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV2ePower1x - coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV2ePower2x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV2ePower3x;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_010(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0y*iv0x) + coeffV2ePower0x*iv0y + coeffV2ePower0y*iv1x - iv0y*iv1x - coeffV2ePower0x*iv1y + iv0x*iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower0y - coeffV2ePower1y*iv0x - iv0y + coeffV2ePower1x*iv0y + coeffV2ePower1y*iv1x - coeffV2ePower1x*iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV2ePower0x + coeffV2ePower1y + iv0x - coeffV2ePower2y*iv0x + coeffV2ePower2x*iv0y + coeffV2ePower2y*iv1x - coeffV2ePower2x*iv1y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV2ePower1x + coeffV2ePower2y - coeffV2ePower3y*iv0x + coeffV2ePower3x*iv0y + coeffV2ePower3y*iv1x - coeffV2ePower3x*iv1y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV2ePower2x + coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV2ePower3x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_011(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0z*iv0y) + coeffV2ePower0y*iv0z + coeffV2ePower0z*iv1y - iv0z*iv1y - coeffV2ePower0y*iv1z + iv0y*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV2ePower1z*iv0y) + coeffV2ePower1y*iv0z + coeffV2ePower1z*iv1y - coeffV2ePower1y*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower0z - coeffV2ePower2z*iv0y - iv0z + coeffV2ePower2y*iv0z + coeffV2ePower2z*iv1y - coeffV2ePower2y*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV2ePower0y + coeffV2ePower1z + iv0y - coeffV2ePower3z*iv0y + coeffV2ePower3y*iv0z + coeffV2ePower3z*iv1y - coeffV2ePower3y*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV2ePower1y + coeffV2ePower2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV2ePower2y + coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_011(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*iv0x - coeffV2ePower0x*iv0z - coeffV2ePower0z*iv1x + iv0z*iv1x + coeffV2ePower0x*iv1z - iv0x*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV2ePower0z + coeffV2ePower1z*iv0x + iv0z - coeffV2ePower1x*iv0z - coeffV2ePower1z*iv1x + coeffV2ePower1x*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV2ePower1z + coeffV2ePower2z*iv0x - coeffV2ePower2x*iv0z - coeffV2ePower2z*iv1x + coeffV2ePower2x*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower0x - coeffV2ePower2z - iv0x + coeffV2ePower3z*iv0x - coeffV2ePower3x*iv0z - coeffV2ePower3z*iv1x + coeffV2ePower3x*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV2ePower1x - coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV2ePower2x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV2ePower3x;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_011(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0y*iv0x) + coeffV2ePower0x*iv0y + coeffV2ePower0y*iv1x - iv0y*iv1x - coeffV2ePower0x*iv1y + iv0x*iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower0y - coeffV2ePower1y*iv0x - iv0y + coeffV2ePower1x*iv0y + coeffV2ePower1y*iv1x - coeffV2ePower1x*iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV2ePower0x + coeffV2ePower1y + iv0x - coeffV2ePower2y*iv0x + coeffV2ePower2x*iv0y + coeffV2ePower2y*iv1x - coeffV2ePower2x*iv1y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV2ePower1x + coeffV2ePower2y - coeffV2ePower3y*iv0x + coeffV2ePower3x*iv0y + coeffV2ePower3y*iv1x - coeffV2ePower3x*iv1y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV2ePower2x + coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV2ePower3x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_100(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0z*iv0y) + coeffV2ePower0y*iv0z + coeffV2ePower0z*iv1y - iv0z*iv1y - coeffV2ePower0y*iv1z + iv0y*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV2ePower1z*iv0y) + coeffV2ePower1y*iv0z + coeffV2ePower1z*iv1y - coeffV2ePower1y*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV2ePower0z - coeffV2ePower2z*iv0y + coeffV2ePower2y*iv0z + coeffV2ePower2z*iv1y + iv1z - coeffV2ePower2y*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower0y - coeffV2ePower1z - coeffV2ePower3z*iv0y + coeffV2ePower3y*iv0z - iv1y + coeffV2ePower3z*iv1y - coeffV2ePower3y*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV2ePower1y - coeffV2ePower2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV2ePower2y - coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_100(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*iv0x - coeffV2ePower0x*iv0z - coeffV2ePower0z*iv1x + iv0z*iv1x + coeffV2ePower0x*iv1z - iv0x*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower0z + coeffV2ePower1z*iv0x - coeffV2ePower1x*iv0z - coeffV2ePower1z*iv1x - iv1z + coeffV2ePower1x*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower1z + coeffV2ePower2z*iv0x - coeffV2ePower2x*iv0z - coeffV2ePower2z*iv1x + coeffV2ePower2x*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV2ePower0x + coeffV2ePower2z + coeffV2ePower3z*iv0x - coeffV2ePower3x*iv0z + iv1x - coeffV2ePower3z*iv1x + coeffV2ePower3x*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV2ePower1x + coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV2ePower2x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV2ePower3x;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_100(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0y*iv0x) + coeffV2ePower0x*iv0y + coeffV2ePower0y*iv1x - iv0y*iv1x - coeffV2ePower0x*iv1y + iv0x*iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV2ePower0y - coeffV2ePower1y*iv0x + coeffV2ePower1x*iv0y + coeffV2ePower1y*iv1x + iv1y - coeffV2ePower1x*iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower0x - coeffV2ePower1y - coeffV2ePower2y*iv0x + coeffV2ePower2x*iv0y - iv1x + coeffV2ePower2y*iv1x - coeffV2ePower2x*iv1y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower1x - coeffV2ePower2y - coeffV2ePower3y*iv0x + coeffV2ePower3x*iv0y + coeffV2ePower3y*iv1x - coeffV2ePower3x*iv1y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV2ePower2x - coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV2ePower3x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_101(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0z*iv0y) + coeffV2ePower0y*iv0z + coeffV2ePower0z*iv1y - iv0z*iv1y - coeffV2ePower0y*iv1z + iv0y*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV2ePower1z*iv0y) + coeffV2ePower1y*iv0z + coeffV2ePower1z*iv1y - coeffV2ePower1y*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV2ePower0z - coeffV2ePower2z*iv0y + coeffV2ePower2y*iv0z + coeffV2ePower2z*iv1y + iv1z - coeffV2ePower2y*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower0y - coeffV2ePower1z - coeffV2ePower3z*iv0y + coeffV2ePower3y*iv0z - iv1y + coeffV2ePower3z*iv1y - coeffV2ePower3y*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV2ePower1y - coeffV2ePower2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV2ePower2y - coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_101(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*iv0x - coeffV2ePower0x*iv0z - coeffV2ePower0z*iv1x + iv0z*iv1x + coeffV2ePower0x*iv1z - iv0x*iv1z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower0z + coeffV2ePower1z*iv0x - coeffV2ePower1x*iv0z - coeffV2ePower1z*iv1x - iv1z + coeffV2ePower1x*iv1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower1z + coeffV2ePower2z*iv0x - coeffV2ePower2x*iv0z - coeffV2ePower2z*iv1x + coeffV2ePower2x*iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV2ePower0x + coeffV2ePower2z + coeffV2ePower3z*iv0x - coeffV2ePower3x*iv0z + iv1x - coeffV2ePower3z*iv1x + coeffV2ePower3x*iv1z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV2ePower1x + coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV2ePower2x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV2ePower3x;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_101(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV2ePower0y*iv0x) + coeffV2ePower0x*iv0y + coeffV2ePower0y*iv1x - iv0y*iv1x - coeffV2ePower0x*iv1y + iv0x*iv1y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV2ePower0y - coeffV2ePower1y*iv0x + coeffV2ePower1x*iv0y + coeffV2ePower1y*iv1x + iv1y - coeffV2ePower1x*iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower0x - coeffV2ePower1y - coeffV2ePower2y*iv0x + coeffV2ePower2x*iv0y - iv1x + coeffV2ePower2y*iv1x - coeffV2ePower2x*iv1y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower1x - coeffV2ePower2y - coeffV2ePower3y*iv0x + coeffV2ePower3x*iv0y + coeffV2ePower3y*iv1x - coeffV2ePower3x*iv1y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV2ePower2x - coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV2ePower3x;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_110(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(-iv0y + iv1y) - iv0z*(-iv0y + iv1y) + coeffV2ePower0y*(iv0z - iv1z) - iv0y*(iv0z - iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1z*(-iv0y + iv1y) + coeffV2ePower1y*(iv0z - iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv0z + coeffV2ePower2z*(-iv0y + iv1y) + coeffV2ePower2y*(iv0z - iv1z) + iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y - iv1y + coeffV2ePower3z*(-iv0y + iv1y) + coeffV2ePower3y*(iv0z - iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_110(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(iv0x - iv1x) - iv0z*(iv0x - iv1x) + coeffV2ePower0x*(-iv0z + iv1z) - iv0x*(-iv0z + iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z + coeffV2ePower1z*(iv0x - iv1x) - iv1z + coeffV2ePower1x*(-iv0z + iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2z*(iv0x - iv1x) + coeffV2ePower2x*(-iv0z + iv1z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv0x + coeffV2ePower3z*(iv0x - iv1x) + iv1x + coeffV2ePower3x*(-iv0z + iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_110(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0y*(-iv0x + iv1x) - iv0y*(-iv0x + iv1x) + coeffV2ePower0x*(iv0y - iv1y) - iv0x*(iv0y - iv1y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv0y + coeffV2ePower1y*(-iv0x + iv1x) + coeffV2ePower1x*(iv0y - iv1y) + iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0x - iv1x + coeffV2ePower2y*(-iv0x + iv1x) + coeffV2ePower2x*(iv0y - iv1y);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3y*(-iv0x + iv1x) + coeffV2ePower3x*(iv0y - iv1y);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_111(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(-iv0y + iv1y) - iv0z*(-iv0y + iv1y) + coeffV2ePower0y*(iv0z - iv1z) - iv0y*(iv0z - iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV2ePower1z*(-iv0y + iv1y) + coeffV2ePower1y*(iv0z - iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -iv0z + coeffV2ePower2z*(-iv0y + iv1y) + coeffV2ePower2y*(iv0z - iv1z) + iv1z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y - iv1y + coeffV2ePower3z*(-iv0y + iv1y) + coeffV2ePower3y*(iv0z - iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_111(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0z*(iv0x - iv1x) - iv0z*(iv0x - iv1x) + coeffV2ePower0x*(-iv0z + iv1z) - iv0x*(-iv0z + iv1z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z + coeffV2ePower1z*(iv0x - iv1x) - iv1z + coeffV2ePower1x*(-iv0z + iv1z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV2ePower2z*(iv0x - iv1x) + coeffV2ePower2x*(-iv0z + iv1z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -iv0x + coeffV2ePower3z*(iv0x - iv1x) + iv1x + coeffV2ePower3x*(-iv0z + iv1z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_111(const InputVertex &v0, const InputVertex &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
/*****************************************************/
VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV2ePower0y*(-iv0x + iv1x) - iv0y*(-iv0x + iv1x) + coeffV2ePower0x*(iv0y - iv1y) - iv0x*(iv0y - iv1y);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -iv0y + coeffV2ePower1y*(-iv0x + iv1x) + coeffV2ePower1x*(iv0y - iv1y) + iv1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0x - iv1x + coeffV2ePower2y*(-iv0x + iv1x) + coeffV2ePower2x*(iv0y - iv1y);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV2ePower3y*(-iv0x + iv1x) + coeffV2ePower3x*(iv0y - iv1y);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_000(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2z*coeffV2ePower0y) + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3z*coeffV2ePower0y) + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3z*coeffV2ePower1y) + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3z*coeffV2ePower2y) + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3z*coeffV2ePower3y) + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_000(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower1z*coeffV2ePower0x - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_000(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1y*coeffV2ePower0x) + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2y*coeffV2ePower0x) + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3y*coeffV2ePower0x) + coeffV1ePower3x*coeffV2ePower0y - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3y*coeffV2ePower1x) + coeffV1ePower3x*coeffV2ePower1y - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3y*coeffV2ePower2x) + coeffV1ePower3x*coeffV2ePower2y - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_001(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2z*coeffV2ePower0y) + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3z*coeffV2ePower0y) + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3z*coeffV2ePower1y) + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3z*coeffV2ePower2y) + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3z*coeffV2ePower3y) + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_001(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower1z*coeffV2ePower0x - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_001(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1y*coeffV2ePower0x) + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2y*coeffV2ePower0x) + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3y*coeffV2ePower0x) + coeffV1ePower3x*coeffV2ePower0y - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3y*coeffV2ePower1x) + coeffV1ePower3x*coeffV2ePower1y - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3y*coeffV2ePower2x) + coeffV1ePower3x*coeffV2ePower2y - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_010(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2z*coeffV2ePower0y) + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3z*coeffV2ePower0y) + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3z*coeffV2ePower1y) + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3z*coeffV2ePower2y) + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3z*coeffV2ePower3y) + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_010(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower1z*coeffV2ePower0x - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_010(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1y*coeffV2ePower0x) + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2y*coeffV2ePower0x) + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3y*coeffV2ePower0x) + coeffV1ePower3x*coeffV2ePower0y - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3y*coeffV2ePower1x) + coeffV1ePower3x*coeffV2ePower1y - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3y*coeffV2ePower2x) + coeffV1ePower3x*coeffV2ePower2y - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_011(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2z*coeffV2ePower0y) + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3z*coeffV2ePower0y) + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3z*coeffV2ePower1y) + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3z*coeffV2ePower2y) + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3z*coeffV2ePower3y) + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_011(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower1z*coeffV2ePower0x - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_011(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1y*coeffV2ePower0x) + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV1ePower2y*coeffV2ePower0x) + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV1ePower3y*coeffV2ePower0x) + coeffV1ePower3x*coeffV2ePower0y - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV1ePower3y*coeffV2ePower1x) + coeffV1ePower3x*coeffV2ePower1y - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV1ePower3y*coeffV2ePower2x) + coeffV1ePower3x*coeffV2ePower2y - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_100(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower0z - coeffV1ePower2z*coeffV2ePower0y - coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower0y + coeffV1ePower1z + coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y - coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower1y + coeffV1ePower2z + coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y - coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower2y + coeffV1ePower3z + coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y - coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV1ePower3y + coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_100(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower0z + coeffV1ePower1z*coeffV2ePower0x + coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower1z + coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x + coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower0x - coeffV1ePower2z - coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x + coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower1x - coeffV1ePower3z - coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x + coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower2x - coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3x - coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_100(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower0y - coeffV1ePower1y*coeffV2ePower0x - coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower0x + coeffV1ePower1y + coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x - coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower1x + coeffV1ePower2y - coeffV1ePower3y*coeffV2ePower0x + coeffV1ePower3x*coeffV2ePower0y + coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x - coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower2x + coeffV1ePower3y - coeffV1ePower3y*coeffV2ePower1x + coeffV1ePower3x*coeffV2ePower1y + coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x - coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower3x - coeffV1ePower3y*coeffV2ePower2x + coeffV1ePower3x*coeffV2ePower2y + coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_101(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower0z - coeffV1ePower2z*coeffV2ePower0y - coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower0y + coeffV1ePower1z + coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y - coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower1y + coeffV1ePower2z + coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y - coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower2y + coeffV1ePower3z + coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y - coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV1ePower3y + coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_101(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower0z + coeffV1ePower1z*coeffV2ePower0x + coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower1z + coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x + coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower0x - coeffV1ePower2z - coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x + coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower1x - coeffV1ePower3z - coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x + coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower2x - coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3x - coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_101(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower0y - coeffV1ePower1y*coeffV2ePower0x - coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower0x + coeffV1ePower1y + coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x - coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower1x + coeffV1ePower2y - coeffV1ePower3y*coeffV2ePower0x + coeffV1ePower3x*coeffV2ePower0y + coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x - coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower2x + coeffV1ePower3y - coeffV1ePower3y*coeffV2ePower1x + coeffV1ePower3x*coeffV2ePower1y + coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x - coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower3x - coeffV1ePower3y*coeffV2ePower2x + coeffV1ePower3x*coeffV2ePower2y + coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_110(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower0z - coeffV1ePower2z*coeffV2ePower0y - coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower0y + coeffV1ePower1z + coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y - coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower1y + coeffV1ePower2z + coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y - coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower2y + coeffV1ePower3z + coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y - coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV1ePower3y + coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_110(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower0z + coeffV1ePower1z*coeffV2ePower0x + coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower1z + coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x + coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower0x - coeffV1ePower2z - coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x + coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower1x - coeffV1ePower3z - coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x + coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower2x - coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3x - coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_110(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower0y - coeffV1ePower1y*coeffV2ePower0x - coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower0x + coeffV1ePower1y + coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x - coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower1x + coeffV1ePower2y - coeffV1ePower3y*coeffV2ePower0x + coeffV1ePower3x*coeffV2ePower0y + coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x - coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower2x + coeffV1ePower3y - coeffV1ePower3y*coeffV2ePower1x + coeffV1ePower3x*coeffV2ePower1y + coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x - coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower3x - coeffV1ePower3y*coeffV2ePower2x + coeffV1ePower3x*coeffV2ePower2y + coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_111(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0z*coeffV2ePower0y) + coeffV1ePower0y*coeffV2ePower0z + coeffV1ePower0z*iv0y - coeffV2ePower0z*iv0y - coeffV1ePower0y*iv0z + coeffV2ePower0y*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV1ePower1z*coeffV2ePower0y) + coeffV1ePower1y*coeffV2ePower0z - coeffV1ePower0z*coeffV2ePower1y + coeffV1ePower0y*coeffV2ePower1z + coeffV1ePower1z*iv0y - coeffV2ePower1z*iv0y - coeffV1ePower1y*iv0z + coeffV2ePower1y*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV1ePower0z - coeffV1ePower2z*coeffV2ePower0y - coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z - coeffV1ePower1z*coeffV2ePower1y + coeffV1ePower1y*coeffV2ePower1z - coeffV1ePower0z*coeffV2ePower2y + coeffV1ePower0y*coeffV2ePower2z + coeffV1ePower2z*iv0y - coeffV2ePower2z*iv0y - coeffV1ePower2y*iv0z + coeffV2ePower2y*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower0y + coeffV1ePower1z + coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y + coeffV1ePower3y*coeffV2ePower0z - coeffV1ePower2z*coeffV2ePower1y - coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z - coeffV1ePower1z*coeffV2ePower2y + coeffV1ePower1y*coeffV2ePower2z - coeffV1ePower0z*coeffV2ePower3y + coeffV1ePower0y*coeffV2ePower3z + coeffV1ePower3z*iv0y - coeffV2ePower3z*iv0y - coeffV1ePower3y*iv0z + coeffV2ePower3y*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower1y + coeffV1ePower2z + coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y + coeffV1ePower3y*coeffV2ePower1z - coeffV1ePower2z*coeffV2ePower2y - coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z - coeffV1ePower1z*coeffV2ePower3y + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower2y + coeffV1ePower3z + coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y + coeffV1ePower3y*coeffV2ePower2z - coeffV1ePower2z*coeffV2ePower3y - coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -coeffV1ePower3y + coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_111(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV1ePower0z*coeffV2ePower0x - coeffV1ePower0x*coeffV2ePower0z - coeffV1ePower0z*iv0x + coeffV2ePower0z*iv0x + coeffV1ePower0x*iv0z - coeffV2ePower0x*iv0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -coeffV1ePower0z + coeffV1ePower1z*coeffV2ePower0x + coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z + coeffV1ePower0z*coeffV2ePower1x - coeffV1ePower0x*coeffV2ePower1z - coeffV1ePower1z*iv0x + coeffV2ePower1z*iv0x + coeffV1ePower1x*iv0z - coeffV2ePower1x*iv0z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower1z + coeffV1ePower2z*coeffV2ePower0x - coeffV1ePower2x*coeffV2ePower0z + coeffV1ePower1z*coeffV2ePower1x + coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z + coeffV1ePower0z*coeffV2ePower2x - coeffV1ePower0x*coeffV2ePower2z - coeffV1ePower2z*iv0x + coeffV2ePower2z*iv0x + coeffV1ePower2x*iv0z - coeffV2ePower2x*iv0z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV1ePower0x - coeffV1ePower2z - coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x - coeffV1ePower3x*coeffV2ePower0z + coeffV1ePower2z*coeffV2ePower1x - coeffV1ePower2x*coeffV2ePower1z + coeffV1ePower1z*coeffV2ePower2x + coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z + coeffV1ePower0z*coeffV2ePower3x - coeffV1ePower0x*coeffV2ePower3z - coeffV1ePower3z*iv0x + coeffV2ePower3z*iv0x + coeffV1ePower3x*iv0z - coeffV2ePower3x*iv0z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV1ePower1x - coeffV1ePower3z - coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x - coeffV1ePower3x*coeffV2ePower1z + coeffV1ePower2z*coeffV2ePower2x - coeffV1ePower2x*coeffV2ePower2z + coeffV1ePower1z*coeffV2ePower3x + coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV1ePower2x - coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x - coeffV1ePower3x*coeffV2ePower2z + coeffV1ePower2z*coeffV2ePower3x - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV1ePower3x - coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_111(const InputVertex &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
/*****************************************************/
VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV1ePower0y*coeffV2ePower0x) + coeffV1ePower0x*coeffV2ePower0y + coeffV1ePower0y*iv0x - coeffV2ePower0y*iv0x - coeffV1ePower0x*iv0y + coeffV2ePower0x*iv0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV1ePower0y - coeffV1ePower1y*coeffV2ePower0x - coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y - coeffV1ePower0y*coeffV2ePower1x + coeffV1ePower0x*coeffV2ePower1y + coeffV1ePower1y*iv0x - coeffV2ePower1y*iv0x - coeffV1ePower1x*iv0y + coeffV2ePower1x*iv0y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -coeffV1ePower0x + coeffV1ePower1y + coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x + coeffV1ePower2x*coeffV2ePower0y - coeffV1ePower1y*coeffV2ePower1x - coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y - coeffV1ePower0y*coeffV2ePower2x + coeffV1ePower0x*coeffV2ePower2y + coeffV1ePower2y*iv0x - coeffV2ePower2y*iv0x - coeffV1ePower2x*iv0y + coeffV2ePower2x*iv0y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -coeffV1ePower1x + coeffV1ePower2y - coeffV1ePower3y*coeffV2ePower0x + coeffV1ePower3x*coeffV2ePower0y + coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x + coeffV1ePower2x*coeffV2ePower1y - coeffV1ePower1y*coeffV2ePower2x - coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y - coeffV1ePower0y*coeffV2ePower3x + coeffV1ePower0x*coeffV2ePower3y + coeffV1ePower3y*iv0x - coeffV2ePower3y*iv0x - coeffV1ePower3x*iv0y + coeffV2ePower3x*iv0y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -coeffV1ePower2x + coeffV1ePower3y - coeffV1ePower3y*coeffV2ePower1x + coeffV1ePower3x*coeffV2ePower1y + coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x + coeffV1ePower2x*coeffV2ePower2y - coeffV1ePower1y*coeffV2ePower3x - coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -coeffV1ePower3x - coeffV1ePower3y*coeffV2ePower2x + coeffV1ePower3x*coeffV2ePower2y + coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV1ePower3y*coeffV2ePower3x) + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_000(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_000(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_000(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_001(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_001(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_001(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_010(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_010(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_010(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_011(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_011(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_011(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_100(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_100(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_100(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_101(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_101(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_101(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_110(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_110(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_110(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_x0_111(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0z*coeffV1ePower0y) + coeffV0ePower0y*coeffV1ePower0z + coeffV0ePower0z*coeffV2ePower0y - coeffV1ePower0z*coeffV2ePower0y - coeffV0ePower0y*coeffV2ePower0z + coeffV1ePower0y*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1z*coeffV1ePower0y) + coeffV0ePower1y*coeffV1ePower0z - coeffV0ePower0z*coeffV1ePower1y + coeffV0ePower0y*coeffV1ePower1z + coeffV0ePower1z*coeffV2ePower0y - coeffV1ePower1z*coeffV2ePower0y - coeffV0ePower1y*coeffV2ePower0z + coeffV1ePower1y*coeffV2ePower0z + coeffV0ePower0z*coeffV2ePower1y - coeffV1ePower0z*coeffV2ePower1y - coeffV0ePower0y*coeffV2ePower1z + coeffV1ePower0y*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2z*coeffV1ePower0y) + coeffV0ePower2y*coeffV1ePower0z - coeffV0ePower1z*coeffV1ePower1y + coeffV0ePower1y*coeffV1ePower1z - coeffV0ePower0z*coeffV1ePower2y + coeffV0ePower0y*coeffV1ePower2z + coeffV0ePower2z*coeffV2ePower0y - coeffV1ePower2z*coeffV2ePower0y - coeffV0ePower2y*coeffV2ePower0z + coeffV1ePower2y*coeffV2ePower0z + coeffV0ePower1z*coeffV2ePower1y - coeffV1ePower1z*coeffV2ePower1y - coeffV0ePower1y*coeffV2ePower1z + coeffV1ePower1y*coeffV2ePower1z + coeffV0ePower0z*coeffV2ePower2y - coeffV1ePower0z*coeffV2ePower2y - coeffV0ePower0y*coeffV2ePower2z + coeffV1ePower0y*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3z*coeffV1ePower0y) + coeffV0ePower3y*coeffV1ePower0z - coeffV0ePower2z*coeffV1ePower1y + coeffV0ePower2y*coeffV1ePower1z - coeffV0ePower1z*coeffV1ePower2y + coeffV0ePower1y*coeffV1ePower2z - coeffV0ePower0z*coeffV1ePower3y + coeffV0ePower0y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower0y - coeffV1ePower3z*coeffV2ePower0y - coeffV0ePower3y*coeffV2ePower0z + coeffV1ePower3y*coeffV2ePower0z + coeffV0ePower2z*coeffV2ePower1y - coeffV1ePower2z*coeffV2ePower1y - coeffV0ePower2y*coeffV2ePower1z + coeffV1ePower2y*coeffV2ePower1z + coeffV0ePower1z*coeffV2ePower2y - coeffV1ePower1z*coeffV2ePower2y - coeffV0ePower1y*coeffV2ePower2z + coeffV1ePower1y*coeffV2ePower2z + coeffV0ePower0z*coeffV2ePower3y - coeffV1ePower0z*coeffV2ePower3y - coeffV0ePower0y*coeffV2ePower3z + coeffV1ePower0y*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3z*coeffV1ePower1y) + coeffV0ePower3y*coeffV1ePower1z - coeffV0ePower2z*coeffV1ePower2y + coeffV0ePower2y*coeffV1ePower2z - coeffV0ePower1z*coeffV1ePower3y + coeffV0ePower1y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower1y - coeffV1ePower3z*coeffV2ePower1y - coeffV0ePower3y*coeffV2ePower1z + coeffV1ePower3y*coeffV2ePower1z + coeffV0ePower2z*coeffV2ePower2y - coeffV1ePower2z*coeffV2ePower2y - coeffV0ePower2y*coeffV2ePower2z + coeffV1ePower2y*coeffV2ePower2z + coeffV0ePower1z*coeffV2ePower3y - coeffV1ePower1z*coeffV2ePower3y - coeffV0ePower1y*coeffV2ePower3z + coeffV1ePower1y*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3z*coeffV1ePower2y) + coeffV0ePower3y*coeffV1ePower2z - coeffV0ePower2z*coeffV1ePower3y + coeffV0ePower2y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower2y - coeffV1ePower3z*coeffV2ePower2y - coeffV0ePower3y*coeffV2ePower2z + coeffV1ePower3y*coeffV2ePower2z + coeffV0ePower2z*coeffV2ePower3y - coeffV1ePower2z*coeffV2ePower3y - coeffV0ePower2y*coeffV2ePower3z + coeffV1ePower2y*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3z*coeffV1ePower3y) + coeffV0ePower3y*coeffV1ePower3z + coeffV0ePower3z*coeffV2ePower3y - coeffV1ePower3z*coeffV2ePower3y - coeffV0ePower3y*coeffV2ePower3z + coeffV1ePower3y*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_y0_111(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV0ePower0z*coeffV1ePower0x - coeffV0ePower0x*coeffV1ePower0z - coeffV0ePower0z*coeffV2ePower0x + coeffV1ePower0z*coeffV2ePower0x + coeffV0ePower0x*coeffV2ePower0z - coeffV1ePower0x*coeffV2ePower0z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV0ePower1z*coeffV1ePower0x - coeffV0ePower1x*coeffV1ePower0z + coeffV0ePower0z*coeffV1ePower1x - coeffV0ePower0x*coeffV1ePower1z - coeffV0ePower1z*coeffV2ePower0x + coeffV1ePower1z*coeffV2ePower0x + coeffV0ePower1x*coeffV2ePower0z - coeffV1ePower1x*coeffV2ePower0z - coeffV0ePower0z*coeffV2ePower1x + coeffV1ePower0z*coeffV2ePower1x + coeffV0ePower0x*coeffV2ePower1z - coeffV1ePower0x*coeffV2ePower1z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV0ePower2z*coeffV1ePower0x - coeffV0ePower2x*coeffV1ePower0z + coeffV0ePower1z*coeffV1ePower1x - coeffV0ePower1x*coeffV1ePower1z + coeffV0ePower0z*coeffV1ePower2x - coeffV0ePower0x*coeffV1ePower2z - coeffV0ePower2z*coeffV2ePower0x + coeffV1ePower2z*coeffV2ePower0x + coeffV0ePower2x*coeffV2ePower0z - coeffV1ePower2x*coeffV2ePower0z - coeffV0ePower1z*coeffV2ePower1x + coeffV1ePower1z*coeffV2ePower1x + coeffV0ePower1x*coeffV2ePower1z - coeffV1ePower1x*coeffV2ePower1z - coeffV0ePower0z*coeffV2ePower2x + coeffV1ePower0z*coeffV2ePower2x + coeffV0ePower0x*coeffV2ePower2z - coeffV1ePower0x*coeffV2ePower2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV0ePower3z*coeffV1ePower0x - coeffV0ePower3x*coeffV1ePower0z + coeffV0ePower2z*coeffV1ePower1x - coeffV0ePower2x*coeffV1ePower1z + coeffV0ePower1z*coeffV1ePower2x - coeffV0ePower1x*coeffV1ePower2z + coeffV0ePower0z*coeffV1ePower3x - coeffV0ePower0x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower0x + coeffV1ePower3z*coeffV2ePower0x + coeffV0ePower3x*coeffV2ePower0z - coeffV1ePower3x*coeffV2ePower0z - coeffV0ePower2z*coeffV2ePower1x + coeffV1ePower2z*coeffV2ePower1x + coeffV0ePower2x*coeffV2ePower1z - coeffV1ePower2x*coeffV2ePower1z - coeffV0ePower1z*coeffV2ePower2x + coeffV1ePower1z*coeffV2ePower2x + coeffV0ePower1x*coeffV2ePower2z - coeffV1ePower1x*coeffV2ePower2z - coeffV0ePower0z*coeffV2ePower3x + coeffV1ePower0z*coeffV2ePower3x + coeffV0ePower0x*coeffV2ePower3z - coeffV1ePower0x*coeffV2ePower3z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV0ePower3z*coeffV1ePower1x - coeffV0ePower3x*coeffV1ePower1z + coeffV0ePower2z*coeffV1ePower2x - coeffV0ePower2x*coeffV1ePower2z + coeffV0ePower1z*coeffV1ePower3x - coeffV0ePower1x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower1x + coeffV1ePower3z*coeffV2ePower1x + coeffV0ePower3x*coeffV2ePower1z - coeffV1ePower3x*coeffV2ePower1z - coeffV0ePower2z*coeffV2ePower2x + coeffV1ePower2z*coeffV2ePower2x + coeffV0ePower2x*coeffV2ePower2z - coeffV1ePower2x*coeffV2ePower2z - coeffV0ePower1z*coeffV2ePower3x + coeffV1ePower1z*coeffV2ePower3x + coeffV0ePower1x*coeffV2ePower3z - coeffV1ePower1x*coeffV2ePower3z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV0ePower3z*coeffV1ePower2x - coeffV0ePower3x*coeffV1ePower2z + coeffV0ePower2z*coeffV1ePower3x - coeffV0ePower2x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower2x + coeffV1ePower3z*coeffV2ePower2x + coeffV0ePower3x*coeffV2ePower2z - coeffV1ePower3x*coeffV2ePower2z - coeffV0ePower2z*coeffV2ePower3x + coeffV1ePower2z*coeffV2ePower3x + coeffV0ePower2x*coeffV2ePower3z - coeffV1ePower2x*coeffV2ePower3z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV0ePower3z*coeffV1ePower3x - coeffV0ePower3x*coeffV1ePower3z - coeffV0ePower3z*coeffV2ePower3x + coeffV1ePower3z*coeffV2ePower3x + coeffV0ePower3x*coeffV2ePower3z - coeffV1ePower3x*coeffV2ePower3z;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient2D_z0_111(const VertexFromIntersection &v0, const VertexFromIntersection &v1, const VertexFromIntersection &v2) const{


/*****************************************************/
/*****************************************************/
VertCoord coeffV0ePower0x = getEpsCoefficientsVertexFromIntersection(v0, 0, 0);
VertCoord coeffV0ePower1x = getEpsCoefficientsVertexFromIntersection(v0, 1, 0);
VertCoord coeffV0ePower2x = getEpsCoefficientsVertexFromIntersection(v0, 2, 0);
VertCoord coeffV0ePower3x = getEpsCoefficientsVertexFromIntersection(v0, 3, 0);
VertCoord coeffV0ePower0y = getEpsCoefficientsVertexFromIntersection(v0, 0, 1);
VertCoord coeffV0ePower1y = getEpsCoefficientsVertexFromIntersection(v0, 1, 1);
VertCoord coeffV0ePower2y = getEpsCoefficientsVertexFromIntersection(v0, 2, 1);
VertCoord coeffV0ePower3y = getEpsCoefficientsVertexFromIntersection(v0, 3, 1);
VertCoord coeffV0ePower0z = getEpsCoefficientsVertexFromIntersection(v0, 0, 2);
VertCoord coeffV0ePower1z = getEpsCoefficientsVertexFromIntersection(v0, 1, 2);
VertCoord coeffV0ePower2z = getEpsCoefficientsVertexFromIntersection(v0, 2, 2);
VertCoord coeffV0ePower3z = getEpsCoefficientsVertexFromIntersection(v0, 3, 2);


VertCoord coeffV1ePower0x = getEpsCoefficientsVertexFromIntersection(v1, 0, 0);
VertCoord coeffV1ePower1x = getEpsCoefficientsVertexFromIntersection(v1, 1, 0);
VertCoord coeffV1ePower2x = getEpsCoefficientsVertexFromIntersection(v1, 2, 0);
VertCoord coeffV1ePower3x = getEpsCoefficientsVertexFromIntersection(v1, 3, 0);
VertCoord coeffV1ePower0y = getEpsCoefficientsVertexFromIntersection(v1, 0, 1);
VertCoord coeffV1ePower1y = getEpsCoefficientsVertexFromIntersection(v1, 1, 1);
VertCoord coeffV1ePower2y = getEpsCoefficientsVertexFromIntersection(v1, 2, 1);
VertCoord coeffV1ePower3y = getEpsCoefficientsVertexFromIntersection(v1, 3, 1);
VertCoord coeffV1ePower0z = getEpsCoefficientsVertexFromIntersection(v1, 0, 2);
VertCoord coeffV1ePower1z = getEpsCoefficientsVertexFromIntersection(v1, 1, 2);
VertCoord coeffV1ePower2z = getEpsCoefficientsVertexFromIntersection(v1, 2, 2);
VertCoord coeffV1ePower3z = getEpsCoefficientsVertexFromIntersection(v1, 3, 2);


VertCoord coeffV2ePower0x = getEpsCoefficientsVertexFromIntersection(v2, 0, 0);
VertCoord coeffV2ePower1x = getEpsCoefficientsVertexFromIntersection(v2, 1, 0);
VertCoord coeffV2ePower2x = getEpsCoefficientsVertexFromIntersection(v2, 2, 0);
VertCoord coeffV2ePower3x = getEpsCoefficientsVertexFromIntersection(v2, 3, 0);
VertCoord coeffV2ePower0y = getEpsCoefficientsVertexFromIntersection(v2, 0, 1);
VertCoord coeffV2ePower1y = getEpsCoefficientsVertexFromIntersection(v2, 1, 1);
VertCoord coeffV2ePower2y = getEpsCoefficientsVertexFromIntersection(v2, 2, 1);
VertCoord coeffV2ePower3y = getEpsCoefficientsVertexFromIntersection(v2, 3, 1);
VertCoord coeffV2ePower0z = getEpsCoefficientsVertexFromIntersection(v2, 0, 2);
VertCoord coeffV2ePower1z = getEpsCoefficientsVertexFromIntersection(v2, 1, 2);
VertCoord coeffV2ePower2z = getEpsCoefficientsVertexFromIntersection(v2, 2, 2);
VertCoord coeffV2ePower3z = getEpsCoefficientsVertexFromIntersection(v2, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(coeffV0ePower0y*coeffV1ePower0x) + coeffV0ePower0x*coeffV1ePower0y + coeffV0ePower0y*coeffV2ePower0x - coeffV1ePower0y*coeffV2ePower0x - coeffV0ePower0x*coeffV2ePower0y + coeffV1ePower0x*coeffV2ePower0y;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV0ePower1y*coeffV1ePower0x) + coeffV0ePower1x*coeffV1ePower0y - coeffV0ePower0y*coeffV1ePower1x + coeffV0ePower0x*coeffV1ePower1y + coeffV0ePower1y*coeffV2ePower0x - coeffV1ePower1y*coeffV2ePower0x - coeffV0ePower1x*coeffV2ePower0y + coeffV1ePower1x*coeffV2ePower0y + coeffV0ePower0y*coeffV2ePower1x - coeffV1ePower0y*coeffV2ePower1x - coeffV0ePower0x*coeffV2ePower1y + coeffV1ePower0x*coeffV2ePower1y;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV0ePower2y*coeffV1ePower0x) + coeffV0ePower2x*coeffV1ePower0y - coeffV0ePower1y*coeffV1ePower1x + coeffV0ePower1x*coeffV1ePower1y - coeffV0ePower0y*coeffV1ePower2x + coeffV0ePower0x*coeffV1ePower2y + coeffV0ePower2y*coeffV2ePower0x - coeffV1ePower2y*coeffV2ePower0x - coeffV0ePower2x*coeffV2ePower0y + coeffV1ePower2x*coeffV2ePower0y + coeffV0ePower1y*coeffV2ePower1x - coeffV1ePower1y*coeffV2ePower1x - coeffV0ePower1x*coeffV2ePower1y + coeffV1ePower1x*coeffV2ePower1y + coeffV0ePower0y*coeffV2ePower2x - coeffV1ePower0y*coeffV2ePower2x - coeffV0ePower0x*coeffV2ePower2y + coeffV1ePower0x*coeffV2ePower2y;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV0ePower3y*coeffV1ePower0x) + coeffV0ePower3x*coeffV1ePower0y - coeffV0ePower2y*coeffV1ePower1x + coeffV0ePower2x*coeffV1ePower1y - coeffV0ePower1y*coeffV1ePower2x + coeffV0ePower1x*coeffV1ePower2y - coeffV0ePower0y*coeffV1ePower3x + coeffV0ePower0x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower0x - coeffV1ePower3y*coeffV2ePower0x - coeffV0ePower3x*coeffV2ePower0y + coeffV1ePower3x*coeffV2ePower0y + coeffV0ePower2y*coeffV2ePower1x - coeffV1ePower2y*coeffV2ePower1x - coeffV0ePower2x*coeffV2ePower1y + coeffV1ePower2x*coeffV2ePower1y + coeffV0ePower1y*coeffV2ePower2x - coeffV1ePower1y*coeffV2ePower2x - coeffV0ePower1x*coeffV2ePower2y + coeffV1ePower1x*coeffV2ePower2y + coeffV0ePower0y*coeffV2ePower3x - coeffV1ePower0y*coeffV2ePower3x - coeffV0ePower0x*coeffV2ePower3y + coeffV1ePower0x*coeffV2ePower3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV0ePower3y*coeffV1ePower1x) + coeffV0ePower3x*coeffV1ePower1y - coeffV0ePower2y*coeffV1ePower2x + coeffV0ePower2x*coeffV1ePower2y - coeffV0ePower1y*coeffV1ePower3x + coeffV0ePower1x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower1x - coeffV1ePower3y*coeffV2ePower1x - coeffV0ePower3x*coeffV2ePower1y + coeffV1ePower3x*coeffV2ePower1y + coeffV0ePower2y*coeffV2ePower2x - coeffV1ePower2y*coeffV2ePower2x - coeffV0ePower2x*coeffV2ePower2y + coeffV1ePower2x*coeffV2ePower2y + coeffV0ePower1y*coeffV2ePower3x - coeffV1ePower1y*coeffV2ePower3x - coeffV0ePower1x*coeffV2ePower3y + coeffV1ePower1x*coeffV2ePower3y;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV0ePower3y*coeffV1ePower2x) + coeffV0ePower3x*coeffV1ePower2y - coeffV0ePower2y*coeffV1ePower3x + coeffV0ePower2x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower2x - coeffV1ePower3y*coeffV2ePower2x - coeffV0ePower3x*coeffV2ePower2y + coeffV1ePower3x*coeffV2ePower2y + coeffV0ePower2y*coeffV2ePower3x - coeffV1ePower2y*coeffV2ePower3x - coeffV0ePower2x*coeffV2ePower3y + coeffV1ePower2x*coeffV2ePower3y;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV0ePower3y*coeffV1ePower3x) + coeffV0ePower3x*coeffV1ePower3y + coeffV0ePower3y*coeffV2ePower3x - coeffV1ePower3y*coeffV2ePower3x - coeffV0ePower3x*coeffV2ePower3y + coeffV1ePower3x*coeffV2ePower3y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0000(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0001(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + (iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z)*iv3x + (-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z)*iv3y + (iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y)*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0010(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv1y) + iv0y*iv1z + iv0z*iv3y - iv1z*iv3y - iv0y*iv3z + iv1y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv1x - iv0x*iv1z - iv0z*iv3x + iv1z*iv3x + iv0x*iv3z - iv1x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv1x) + iv0x*iv1y + iv0y*iv3x - iv1y*iv3x - iv0x*iv3y + iv1x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0011(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv2y) + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z + iv0z*iv3y - iv1z*iv3y - iv0y*iv3z + iv1y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z - iv0z*iv3x + iv1z*iv3x + iv0x*iv3z - iv1x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv2x) + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y + iv0y*iv3x - iv1y*iv3x - iv0x*iv3y + iv1x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0100(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z*iv2y - iv0y*iv2z - iv0z*iv3y + iv2z*iv3y + iv0y*iv3z - iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(iv0z*iv2x) + iv0x*iv2z + iv0z*iv3x - iv2z*iv3x - iv0x*iv3z + iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y*iv2x - iv0x*iv2y - iv0y*iv3x + iv2y*iv3x + iv0x*iv3y - iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0101(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z*iv1y - iv0y*iv1z + iv1z*iv2y - iv1y*iv2z - iv0z*iv3y + iv2z*iv3y + iv0y*iv3z - iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(iv0z*iv1x) + iv0x*iv1z - iv1z*iv2x + iv1x*iv2z + iv0z*iv3x - iv2z*iv3x - iv0x*iv3z + iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y*iv1x - iv0x*iv1y + iv1y*iv2x - iv1x*iv2y - iv0y*iv3x + iv2y*iv3x + iv0x*iv3y - iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0110(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv1y) + iv0y*iv1z + iv0z*iv2y - iv0y*iv2z - iv1z*iv3y + iv2z*iv3y + iv1y*iv3z - iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv1x - iv0x*iv1z - iv0z*iv2x + iv0x*iv2z + iv1z*iv3x - iv2z*iv3x - iv1x*iv3z + iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv1x) + iv0x*iv1y + iv0y*iv2x - iv0x*iv2y - iv1y*iv3x + iv2y*iv3x + iv1x*iv3y - iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0111(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv1z*iv2y - iv1y*iv2z - iv1z*iv3y + iv2z*iv3y + iv1y*iv3z - iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(iv1z*iv2x) + iv1x*iv2z + iv1z*iv3x - iv2z*iv3x - iv1x*iv3z + iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv1y*iv2x - iv1x*iv2y - iv1y*iv3x + iv2y*iv3x + iv1x*iv3y - iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1000(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv1z*iv2y) + iv1y*iv2z + iv1z*iv3y - iv2z*iv3y - iv1y*iv3z + iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv1z*iv2x - iv1x*iv2z - iv1z*iv3x + iv2z*iv3x + iv1x*iv3z - iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv1y*iv2x) + iv1x*iv2y + iv1y*iv3x - iv2y*iv3x - iv1x*iv3y + iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1001(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv0y*iv2z + iv1z*iv3y - iv2z*iv3y - iv1y*iv3z + iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv0x*iv2z - iv1z*iv3x + iv2z*iv3x + iv1x*iv3z - iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv0x*iv2y + iv1y*iv3x - iv2y*iv3x - iv1x*iv3y + iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1010(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv1y) + iv0y*iv1z - iv1z*iv2y + iv1y*iv2z + iv0z*iv3y - iv2z*iv3y - iv0y*iv3z + iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv1x - iv0x*iv1z + iv1z*iv2x - iv1x*iv2z - iv0z*iv3x + iv2z*iv3x + iv0x*iv3z - iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv1x) + iv0x*iv1y - iv1y*iv2x + iv1x*iv2y + iv0y*iv3x - iv2y*iv3x - iv0x*iv3y + iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1011(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv2y) + iv0y*iv2z + iv0z*iv3y - iv2z*iv3y - iv0y*iv3z + iv2y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv2x - iv0x*iv2z - iv0z*iv3x + iv2z*iv3x + iv0x*iv3z - iv2x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv2x) + iv0x*iv2y + iv0y*iv3x - iv2y*iv3x - iv0x*iv3y + iv2x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1100(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z*iv2y - iv1z*iv2y - iv0y*iv2z + iv1y*iv2z - iv0z*iv3y + iv1z*iv3y + iv0y*iv3z - iv1y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(iv0z*iv2x) + iv1z*iv2x + iv0x*iv2z - iv1x*iv2z + iv0z*iv3x - iv1z*iv3x - iv0x*iv3z + iv1x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y*iv2x - iv1y*iv2x - iv0x*iv2y + iv1x*iv2y - iv0y*iv3x + iv1y*iv3x + iv0x*iv3y - iv1x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1101(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = iv0z*iv1y - iv0y*iv1z - iv0z*iv3y + iv1z*iv3y + iv0y*iv3z - iv1y*iv3z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(iv0z*iv1x) + iv0x*iv1z + iv0z*iv3x - iv1z*iv3x - iv0x*iv3z + iv1x*iv3z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = iv0y*iv1x - iv0x*iv1y - iv0y*iv3x + iv1y*iv3x + iv0x*iv3y - iv1x*iv3y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1110(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv1y) + iv0y*iv1z + iv0z*iv2y - iv1z*iv2y - iv0y*iv2z + iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv1x - iv0x*iv1z - iv0z*iv2x + iv1z*iv2x + iv0x*iv2z - iv1x*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv1x) + iv0x*iv1y + iv0y*iv2x - iv1y*iv2x - iv0x*iv2y + iv1x*iv2y;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1111(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const InputVertex &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
const VertCoord &iv3x = getCoordinates(v3)[0];
const VertCoord &iv3y = getCoordinates(v3)[1];
const VertCoord &iv3z = getCoordinates(v3)[2];
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + iv0z*iv1y*iv3x - iv0y*iv1z*iv3x - iv0z*iv2y*iv3x + iv1z*iv2y*iv3x + iv0y*iv2z*iv3x - iv1y*iv2z*iv3x - iv0z*iv1x*iv3y + iv0x*iv1z*iv3y + iv0z*iv2x*iv3y - iv1z*iv2x*iv3y - iv0x*iv2z*iv3y + iv1x*iv2z*iv3y + iv0y*iv1x*iv3z - iv0x*iv1y*iv3z - iv0y*iv2x*iv3z + iv1y*iv2x*iv3z + iv0x*iv2y*iv3z - iv1x*iv2y*iv3z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0000(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y + coeffV3ePower0z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + coeffV3ePower0y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower0x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower1z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower1y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower1x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower2z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower2y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower2x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower3z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower3y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower3x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0001(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y + coeffV3ePower0z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + coeffV3ePower0y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower0x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower1z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower1y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower1x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower2z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower2y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower2x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower3z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower3y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower3x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0010(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + (-(iv0z*iv1y) + iv0y*iv1z)*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y + (iv0z*iv1x - iv0x*iv1z)*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + (-(iv0y*iv1x) + iv0x*iv1y)*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV3ePower0z*iv0y) + coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x + coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y - iv0z*iv1y + coeffV3ePower1x*iv0z*iv1y - coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z + iv0y*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower1z*iv0x*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower1y*iv0x*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower0z*iv0x - coeffV3ePower1z*iv0y - coeffV3ePower0x*iv0z + coeffV3ePower1y*iv0z - coeffV3ePower0z*iv1x + coeffV3ePower2z*iv0y*iv1x + iv0z*iv1x - coeffV3ePower2y*iv0z*iv1x + coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y + coeffV3ePower0x*iv1z - coeffV3ePower1y*iv1z - iv0x*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower2z*iv0y*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV3ePower0y*iv0x) + coeffV3ePower1z*iv0x + coeffV3ePower0x*iv0y - coeffV3ePower2z*iv0y - coeffV3ePower1x*iv0z + coeffV3ePower2y*iv0z + coeffV3ePower0y*iv1x - coeffV3ePower1z*iv1x - iv0y*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x - coeffV3ePower0x*iv1y + coeffV3ePower2z*iv1y + iv0x*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower1x*iv1z - coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV3ePower1y*iv0x) + coeffV3ePower2z*iv0x + coeffV3ePower1x*iv0y - coeffV3ePower3z*iv0y - coeffV3ePower2x*iv0z + coeffV3ePower3y*iv0z + coeffV3ePower1y*iv1x - coeffV3ePower2z*iv1x - coeffV3ePower1x*iv1y + coeffV3ePower3z*iv1y + coeffV3ePower2x*iv1z - coeffV3ePower3y*iv1z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV3ePower2y*iv0x) + coeffV3ePower3z*iv0x + coeffV3ePower2x*iv0y - coeffV3ePower3x*iv0z + coeffV3ePower2y*iv1x - coeffV3ePower3z*iv1x - coeffV3ePower2x*iv1y + coeffV3ePower3x*iv1z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV3ePower3y*iv0x) + coeffV3ePower3x*iv0y + coeffV3ePower3y*iv1x - coeffV3ePower3x*iv1y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0011(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + (-(iv0z*iv1y) + iv0y*iv1z)*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y + (iv0z*iv1x - iv0x*iv1z)*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + (-(iv0y*iv1x) + iv0x*iv1y)*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV3ePower0z*iv0y) + coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x + coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y - iv0z*iv1y + coeffV3ePower1x*iv0z*iv1y - coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z + iv0y*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower1z*iv0x*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower1y*iv0x*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower0z*iv0x - coeffV3ePower1z*iv0y - coeffV3ePower0x*iv0z + coeffV3ePower1y*iv0z - coeffV3ePower0z*iv1x + coeffV3ePower2z*iv0y*iv1x + iv0z*iv1x - coeffV3ePower2y*iv0z*iv1x + coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y + coeffV3ePower0x*iv1z - coeffV3ePower1y*iv1z - iv0x*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower2z*iv0y*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV3ePower0y*iv0x) + coeffV3ePower1z*iv0x + coeffV3ePower0x*iv0y - coeffV3ePower2z*iv0y - coeffV3ePower1x*iv0z + coeffV3ePower2y*iv0z + coeffV3ePower0y*iv1x - coeffV3ePower1z*iv1x - iv0y*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x - coeffV3ePower0x*iv1y + coeffV3ePower2z*iv1y + iv0x*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower1x*iv1z - coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV3ePower1y*iv0x) + coeffV3ePower2z*iv0x + coeffV3ePower1x*iv0y - coeffV3ePower3z*iv0y - coeffV3ePower2x*iv0z + coeffV3ePower3y*iv0z + coeffV3ePower1y*iv1x - coeffV3ePower2z*iv1x - coeffV3ePower1x*iv1y + coeffV3ePower3z*iv1y + coeffV3ePower2x*iv1z - coeffV3ePower3y*iv1z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV3ePower2y*iv0x) + coeffV3ePower3z*iv0x + coeffV3ePower2x*iv0y - coeffV3ePower3x*iv0z + coeffV3ePower2y*iv1x - coeffV3ePower3z*iv1x - coeffV3ePower2x*iv1y + coeffV3ePower3x*iv1z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV3ePower3y*iv0x) + coeffV3ePower3x*iv0y + coeffV3ePower3y*iv1x - coeffV3ePower3x*iv1y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0100(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower0z*iv0y - coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower1z*iv0x*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower1y*iv0x*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x - coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y + iv0z*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y + coeffV3ePower1x*iv1z*iv2y + coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z - iv0y*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV3ePower0z*iv0x) + coeffV3ePower1z*iv0y + coeffV3ePower0x*iv0z - coeffV3ePower1y*iv0z + coeffV3ePower2z*iv0y*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z + coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x - iv0z*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x - coeffV3ePower2y*iv1z*iv2x - coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y - coeffV3ePower0x*iv2z + coeffV3ePower1y*iv2z + iv0x*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower0y*iv0x - coeffV3ePower1z*iv0x - coeffV3ePower0x*iv0y + coeffV3ePower2z*iv0y + coeffV3ePower1x*iv0z - coeffV3ePower2y*iv0z + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z - coeffV3ePower0y*iv2x + coeffV3ePower1z*iv2x + iv0y*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x + coeffV3ePower0x*iv2y - coeffV3ePower2z*iv2y - iv0x*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower1x*iv2z + coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV3ePower1y*iv0x - coeffV3ePower2z*iv0x - coeffV3ePower1x*iv0y + coeffV3ePower3z*iv0y + coeffV3ePower2x*iv0z - coeffV3ePower3y*iv0z - coeffV3ePower1y*iv2x + coeffV3ePower2z*iv2x + coeffV3ePower1x*iv2y - coeffV3ePower3z*iv2y - coeffV3ePower2x*iv2z + coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV3ePower2y*iv0x - coeffV3ePower3z*iv0x - coeffV3ePower2x*iv0y + coeffV3ePower3x*iv0z - coeffV3ePower2y*iv2x + coeffV3ePower3z*iv2x + coeffV3ePower2x*iv2y - coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV3ePower3y*iv0x - coeffV3ePower3x*iv0y - coeffV3ePower3y*iv2x + coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0101(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower0z*iv0y - coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower1z*iv0x*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower1y*iv0x*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x - coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y + iv0z*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y + coeffV3ePower1x*iv1z*iv2y + coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z - iv0y*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV3ePower0z*iv0x) + coeffV3ePower1z*iv0y + coeffV3ePower0x*iv0z - coeffV3ePower1y*iv0z + coeffV3ePower2z*iv0y*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z + coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x - iv0z*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x - coeffV3ePower2y*iv1z*iv2x - coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y - coeffV3ePower0x*iv2z + coeffV3ePower1y*iv2z + iv0x*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower0y*iv0x - coeffV3ePower1z*iv0x - coeffV3ePower0x*iv0y + coeffV3ePower2z*iv0y + coeffV3ePower1x*iv0z - coeffV3ePower2y*iv0z + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z - coeffV3ePower0y*iv2x + coeffV3ePower1z*iv2x + iv0y*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x + coeffV3ePower0x*iv2y - coeffV3ePower2z*iv2y - iv0x*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower1x*iv2z + coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV3ePower1y*iv0x - coeffV3ePower2z*iv0x - coeffV3ePower1x*iv0y + coeffV3ePower3z*iv0y + coeffV3ePower2x*iv0z - coeffV3ePower3y*iv0z - coeffV3ePower1y*iv2x + coeffV3ePower2z*iv2x + coeffV3ePower1x*iv2y - coeffV3ePower3z*iv2y - coeffV3ePower2x*iv2z + coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV3ePower2y*iv0x - coeffV3ePower3z*iv0x - coeffV3ePower2x*iv0y + coeffV3ePower3x*iv0z - coeffV3ePower2y*iv2x + coeffV3ePower3z*iv2x + coeffV3ePower2x*iv2y - coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV3ePower3y*iv0x - coeffV3ePower3x*iv0y - coeffV3ePower3y*iv2x + coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0110(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x + coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y - iv0z*iv1y + coeffV3ePower1x*iv0z*iv1y - coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z + iv0y*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x - coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y + iv0z*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y + coeffV3ePower1x*iv1z*iv2y + coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z - iv0y*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV3ePower0z*iv1x) + coeffV3ePower2z*iv0y*iv1x + iv0z*iv1x - coeffV3ePower2y*iv0z*iv1x + coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y + coeffV3ePower0x*iv1z - coeffV3ePower1y*iv1z - iv0x*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z + coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x - iv0z*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x - coeffV3ePower2y*iv1z*iv2x - coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y - coeffV3ePower0x*iv2z + coeffV3ePower1y*iv2z + iv0x*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower0y*iv1x - coeffV3ePower1z*iv1x - iv0y*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x - coeffV3ePower0x*iv1y + coeffV3ePower2z*iv1y + iv0x*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower1x*iv1z - coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z - coeffV3ePower0y*iv2x + coeffV3ePower1z*iv2x + iv0y*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x + coeffV3ePower0x*iv2y - coeffV3ePower2z*iv2y - iv0x*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower1x*iv2z + coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV3ePower1y*iv1x - coeffV3ePower2z*iv1x - coeffV3ePower1x*iv1y + coeffV3ePower3z*iv1y + coeffV3ePower2x*iv1z - coeffV3ePower3y*iv1z - coeffV3ePower1y*iv2x + coeffV3ePower2z*iv2x + coeffV3ePower1x*iv2y - coeffV3ePower3z*iv2y - coeffV3ePower2x*iv2z + coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV3ePower2y*iv1x - coeffV3ePower3z*iv1x - coeffV3ePower2x*iv1y + coeffV3ePower3x*iv1z - coeffV3ePower2y*iv2x + coeffV3ePower3z*iv2x + coeffV3ePower2x*iv2y - coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV3ePower3y*iv1x - coeffV3ePower3x*iv1y - coeffV3ePower3y*iv2x + coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_0111(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x + coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y - iv0z*iv1y + coeffV3ePower1x*iv0z*iv1y - coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z + iv0y*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x - coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y + iv0z*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y + coeffV3ePower1x*iv1z*iv2y + coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z - iv0y*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV3ePower0z*iv1x) + coeffV3ePower2z*iv0y*iv1x + iv0z*iv1x - coeffV3ePower2y*iv0z*iv1x + coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y + coeffV3ePower0x*iv1z - coeffV3ePower1y*iv1z - iv0x*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z + coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x - iv0z*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x - coeffV3ePower2y*iv1z*iv2x - coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y - coeffV3ePower0x*iv2z + coeffV3ePower1y*iv2z + iv0x*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower0y*iv1x - coeffV3ePower1z*iv1x - iv0y*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x - coeffV3ePower0x*iv1y + coeffV3ePower2z*iv1y + iv0x*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower1x*iv1z - coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z - coeffV3ePower0y*iv2x + coeffV3ePower1z*iv2x + iv0y*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x + coeffV3ePower0x*iv2y - coeffV3ePower2z*iv2y - iv0x*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower1x*iv2z + coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV3ePower1y*iv1x - coeffV3ePower2z*iv1x - coeffV3ePower1x*iv1y + coeffV3ePower3z*iv1y + coeffV3ePower2x*iv1z - coeffV3ePower3y*iv1z - coeffV3ePower1y*iv2x + coeffV3ePower2z*iv2x + coeffV3ePower1x*iv2y - coeffV3ePower3z*iv2y - coeffV3ePower2x*iv2z + coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV3ePower2y*iv1x - coeffV3ePower3z*iv1x - coeffV3ePower2x*iv1y + coeffV3ePower3x*iv1z - coeffV3ePower2y*iv2x + coeffV3ePower3z*iv2x + coeffV3ePower2x*iv2y - coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV3ePower3y*iv1x - coeffV3ePower3x*iv1y - coeffV3ePower3y*iv2x + coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1000(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y - iv1z*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z + iv1y*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower0z*iv1x + coeffV3ePower2z*iv0y*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y - coeffV3ePower0x*iv1z + coeffV3ePower1y*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x + iv1z*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y + coeffV3ePower0x*iv2z - coeffV3ePower1y*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z - iv1x*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV3ePower0y*iv1x) + coeffV3ePower1z*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x + coeffV3ePower0x*iv1y - coeffV3ePower2z*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y - coeffV3ePower1x*iv1z + coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z + coeffV3ePower0y*iv2x - coeffV3ePower1z*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x - iv1y*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x - coeffV3ePower0x*iv2y + coeffV3ePower2z*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y + iv1x*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y + coeffV3ePower1x*iv2z - coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV3ePower1y*iv1x) + coeffV3ePower2z*iv1x + coeffV3ePower1x*iv1y - coeffV3ePower3z*iv1y - coeffV3ePower2x*iv1z + coeffV3ePower3y*iv1z + coeffV3ePower1y*iv2x - coeffV3ePower2z*iv2x - coeffV3ePower1x*iv2y + coeffV3ePower3z*iv2y + coeffV3ePower2x*iv2z - coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV3ePower2y*iv1x) + coeffV3ePower3z*iv1x + coeffV3ePower2x*iv1y - coeffV3ePower3x*iv1z + coeffV3ePower2y*iv2x - coeffV3ePower3z*iv2x - coeffV3ePower2x*iv2y + coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV3ePower3y*iv1x) + coeffV3ePower3x*iv1y + coeffV3ePower3y*iv2x - coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1001(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y - iv1z*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z + iv1y*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower0z*iv1x + coeffV3ePower2z*iv0y*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y - coeffV3ePower0x*iv1z + coeffV3ePower1y*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x + iv1z*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y + coeffV3ePower0x*iv2z - coeffV3ePower1y*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z - iv1x*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV3ePower0y*iv1x) + coeffV3ePower1z*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x + coeffV3ePower0x*iv1y - coeffV3ePower2z*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y - coeffV3ePower1x*iv1z + coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z + coeffV3ePower0y*iv2x - coeffV3ePower1z*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x - iv1y*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x - coeffV3ePower0x*iv2y + coeffV3ePower2z*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y + iv1x*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y + coeffV3ePower1x*iv2z - coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV3ePower1y*iv1x) + coeffV3ePower2z*iv1x + coeffV3ePower1x*iv1y - coeffV3ePower3z*iv1y - coeffV3ePower2x*iv1z + coeffV3ePower3y*iv1z + coeffV3ePower1y*iv2x - coeffV3ePower2z*iv2x - coeffV3ePower1x*iv2y + coeffV3ePower3z*iv2y + coeffV3ePower2x*iv2z - coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV3ePower2y*iv1x) + coeffV3ePower3z*iv1x + coeffV3ePower2x*iv1y - coeffV3ePower3x*iv1z + coeffV3ePower2y*iv2x - coeffV3ePower3z*iv2x - coeffV3ePower2x*iv2y + coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV3ePower3y*iv1x) + coeffV3ePower3x*iv1y + coeffV3ePower3y*iv2x - coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1010(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV3ePower0z*iv0y) + coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower1z*iv0x*iv1y - iv0z*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower1y*iv0x*iv1z + iv0y*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y - iv1z*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z + iv1y*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower0z*iv0x - coeffV3ePower1z*iv0y - coeffV3ePower0x*iv0z + coeffV3ePower1y*iv0z + coeffV3ePower2z*iv0y*iv1x + iv0z*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y - iv0x*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x + iv1z*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y + coeffV3ePower0x*iv2z - coeffV3ePower1y*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z - iv1x*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV3ePower0y*iv0x) + coeffV3ePower1z*iv0x + coeffV3ePower0x*iv0y - coeffV3ePower2z*iv0y - coeffV3ePower1x*iv0z + coeffV3ePower2y*iv0z - iv0y*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x + iv0x*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z + coeffV3ePower0y*iv2x - coeffV3ePower1z*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x - iv1y*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x - coeffV3ePower0x*iv2y + coeffV3ePower2z*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y + iv1x*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y + coeffV3ePower1x*iv2z - coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV3ePower1y*iv0x) + coeffV3ePower2z*iv0x + coeffV3ePower1x*iv0y - coeffV3ePower3z*iv0y - coeffV3ePower2x*iv0z + coeffV3ePower3y*iv0z + coeffV3ePower1y*iv2x - coeffV3ePower2z*iv2x - coeffV3ePower1x*iv2y + coeffV3ePower3z*iv2y + coeffV3ePower2x*iv2z - coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV3ePower2y*iv0x) + coeffV3ePower3z*iv0x + coeffV3ePower2x*iv0y - coeffV3ePower3x*iv0z + coeffV3ePower2y*iv2x - coeffV3ePower3z*iv2x - coeffV3ePower2x*iv2y + coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV3ePower3y*iv0x) + coeffV3ePower3x*iv0y + coeffV3ePower3y*iv2x - coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1011(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(coeffV3ePower0z*iv0y) + coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower1z*iv0x*iv1y - iv0z*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower1y*iv0x*iv1z + iv0y*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower0z*iv2y + coeffV3ePower1z*iv0x*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y - iv1z*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower0y*iv2z - coeffV3ePower1y*iv0x*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z + iv1y*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = coeffV3ePower0z*iv0x - coeffV3ePower1z*iv0y - coeffV3ePower0x*iv0z + coeffV3ePower1y*iv0z + coeffV3ePower2z*iv0y*iv1x + iv0z*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y - iv0x*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower0z*iv2x - coeffV3ePower2z*iv0y*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x + iv1z*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower1z*iv2y + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y + coeffV3ePower0x*iv2z - coeffV3ePower1y*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z - iv1x*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(coeffV3ePower0y*iv0x) + coeffV3ePower1z*iv0x + coeffV3ePower0x*iv0y - coeffV3ePower2z*iv0y - coeffV3ePower1x*iv0z + coeffV3ePower2y*iv0z - iv0y*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x + iv0x*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z + coeffV3ePower0y*iv2x - coeffV3ePower1z*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x - iv1y*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x - coeffV3ePower0x*iv2y + coeffV3ePower2z*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y + iv1x*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y + coeffV3ePower1x*iv2z - coeffV3ePower2y*iv2z - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = -(coeffV3ePower1y*iv0x) + coeffV3ePower2z*iv0x + coeffV3ePower1x*iv0y - coeffV3ePower3z*iv0y - coeffV3ePower2x*iv0z + coeffV3ePower3y*iv0z + coeffV3ePower1y*iv2x - coeffV3ePower2z*iv2x - coeffV3ePower1x*iv2y + coeffV3ePower3z*iv2y + coeffV3ePower2x*iv2z - coeffV3ePower3y*iv2z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = -(coeffV3ePower2y*iv0x) + coeffV3ePower3z*iv0x + coeffV3ePower2x*iv0y - coeffV3ePower3x*iv0z + coeffV3ePower2y*iv2x - coeffV3ePower3z*iv2x - coeffV3ePower2x*iv2y + coeffV3ePower3x*iv2z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = -(coeffV3ePower3y*iv0x) + coeffV3ePower3x*iv0y + coeffV3ePower3y*iv2x - coeffV3ePower3x*iv2y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1100(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower0z*iv0y - coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower1z*iv0x*iv2y + iv0z*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y - iv1z*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower1y*iv0x*iv2z - iv0y*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z + iv1y*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV3ePower0z*iv0x) + coeffV3ePower1z*iv0y + coeffV3ePower0x*iv0z - coeffV3ePower1y*iv0z + coeffV3ePower0z*iv1x + coeffV3ePower2z*iv0y*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y - coeffV3ePower0x*iv1z + coeffV3ePower1y*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower2z*iv0y*iv2x - iv0z*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x + iv1z*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y + iv0x*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z - iv1x*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower0y*iv0x - coeffV3ePower1z*iv0x - coeffV3ePower0x*iv0y + coeffV3ePower2z*iv0y + coeffV3ePower1x*iv0z - coeffV3ePower2y*iv0z - coeffV3ePower0y*iv1x + coeffV3ePower1z*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x + coeffV3ePower0x*iv1y - coeffV3ePower2z*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y - coeffV3ePower1x*iv1z + coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z + iv0y*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x - iv1y*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x - iv0x*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y + iv1x*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV3ePower1y*iv0x - coeffV3ePower2z*iv0x - coeffV3ePower1x*iv0y + coeffV3ePower3z*iv0y + coeffV3ePower2x*iv0z - coeffV3ePower3y*iv0z - coeffV3ePower1y*iv1x + coeffV3ePower2z*iv1x + coeffV3ePower1x*iv1y - coeffV3ePower3z*iv1y - coeffV3ePower2x*iv1z + coeffV3ePower3y*iv1z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV3ePower2y*iv0x - coeffV3ePower3z*iv0x - coeffV3ePower2x*iv0y + coeffV3ePower3x*iv0z - coeffV3ePower2y*iv1x + coeffV3ePower3z*iv1x + coeffV3ePower2x*iv1y - coeffV3ePower3x*iv1z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV3ePower3y*iv0x - coeffV3ePower3x*iv0y - coeffV3ePower3y*iv1x + coeffV3ePower3x*iv1y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1101(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = coeffV3ePower0z*iv0y*iv1x - coeffV3ePower0y*iv0z*iv1x - coeffV3ePower0z*iv0x*iv1y + coeffV3ePower0x*iv0z*iv1y + coeffV3ePower0y*iv0x*iv1z - coeffV3ePower0x*iv0y*iv1z - coeffV3ePower0z*iv0y*iv2x + coeffV3ePower0y*iv0z*iv2x + coeffV3ePower0z*iv1y*iv2x - iv0z*iv1y*iv2x - coeffV3ePower0y*iv1z*iv2x + iv0y*iv1z*iv2x + coeffV3ePower0z*iv0x*iv2y - coeffV3ePower0x*iv0z*iv2y - coeffV3ePower0z*iv1x*iv2y + iv0z*iv1x*iv2y + coeffV3ePower0x*iv1z*iv2y - iv0x*iv1z*iv2y - coeffV3ePower0y*iv0x*iv2z + coeffV3ePower0x*iv0y*iv2z + coeffV3ePower0y*iv1x*iv2z - iv0y*iv1x*iv2z - coeffV3ePower0x*iv1y*iv2z + iv0x*iv1y*iv2z;
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = coeffV3ePower0z*iv0y - coeffV3ePower0y*iv0z + coeffV3ePower1z*iv0y*iv1x - coeffV3ePower1y*iv0z*iv1x - coeffV3ePower0z*iv1y - coeffV3ePower1z*iv0x*iv1y + coeffV3ePower1x*iv0z*iv1y + coeffV3ePower0y*iv1z + coeffV3ePower1y*iv0x*iv1z - coeffV3ePower1x*iv0y*iv1z - coeffV3ePower1z*iv0y*iv2x + coeffV3ePower1y*iv0z*iv2x + coeffV3ePower1z*iv1y*iv2x - coeffV3ePower1y*iv1z*iv2x + coeffV3ePower1z*iv0x*iv2y + iv0z*iv2y - coeffV3ePower1x*iv0z*iv2y - coeffV3ePower1z*iv1x*iv2y - iv1z*iv2y + coeffV3ePower1x*iv1z*iv2y - coeffV3ePower1y*iv0x*iv2z - iv0y*iv2z + coeffV3ePower1x*iv0y*iv2z + coeffV3ePower1y*iv1x*iv2z + iv1y*iv2z - coeffV3ePower1x*iv1y*iv2z;
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = -(coeffV3ePower0z*iv0x) + coeffV3ePower1z*iv0y + coeffV3ePower0x*iv0z - coeffV3ePower1y*iv0z + coeffV3ePower0z*iv1x + coeffV3ePower2z*iv0y*iv1x - coeffV3ePower2y*iv0z*iv1x - coeffV3ePower1z*iv1y - coeffV3ePower2z*iv0x*iv1y + coeffV3ePower2x*iv0z*iv1y - coeffV3ePower0x*iv1z + coeffV3ePower1y*iv1z + coeffV3ePower2y*iv0x*iv1z - coeffV3ePower2x*iv0y*iv1z - coeffV3ePower2z*iv0y*iv2x - iv0z*iv2x + coeffV3ePower2y*iv0z*iv2x + coeffV3ePower2z*iv1y*iv2x + iv1z*iv2x - coeffV3ePower2y*iv1z*iv2x + coeffV3ePower2z*iv0x*iv2y - coeffV3ePower2x*iv0z*iv2y - coeffV3ePower2z*iv1x*iv2y + coeffV3ePower2x*iv1z*iv2y + iv0x*iv2z - coeffV3ePower2y*iv0x*iv2z + coeffV3ePower2x*iv0y*iv2z - iv1x*iv2z + coeffV3ePower2y*iv1x*iv2z - coeffV3ePower2x*iv1y*iv2z;
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = coeffV3ePower0y*iv0x - coeffV3ePower1z*iv0x - coeffV3ePower0x*iv0y + coeffV3ePower2z*iv0y + coeffV3ePower1x*iv0z - coeffV3ePower2y*iv0z - coeffV3ePower0y*iv1x + coeffV3ePower1z*iv1x + coeffV3ePower3z*iv0y*iv1x - coeffV3ePower3y*iv0z*iv1x + coeffV3ePower0x*iv1y - coeffV3ePower2z*iv1y - coeffV3ePower3z*iv0x*iv1y + coeffV3ePower3x*iv0z*iv1y - coeffV3ePower1x*iv1z + coeffV3ePower2y*iv1z + coeffV3ePower3y*iv0x*iv1z - coeffV3ePower3x*iv0y*iv1z + iv0y*iv2x - coeffV3ePower3z*iv0y*iv2x + coeffV3ePower3y*iv0z*iv2x - iv1y*iv2x + coeffV3ePower3z*iv1y*iv2x - coeffV3ePower3y*iv1z*iv2x - iv0x*iv2y + coeffV3ePower3z*iv0x*iv2y - coeffV3ePower3x*iv0z*iv2y + iv1x*iv2y - coeffV3ePower3z*iv1x*iv2y + coeffV3ePower3x*iv1z*iv2y - coeffV3ePower3y*iv0x*iv2z + coeffV3ePower3x*iv0y*iv2z + coeffV3ePower3y*iv1x*iv2z - coeffV3ePower3x*iv1y*iv2z;
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_5 = coeffV3ePower1y*iv0x - coeffV3ePower2z*iv0x - coeffV3ePower1x*iv0y + coeffV3ePower3z*iv0y + coeffV3ePower2x*iv0z - coeffV3ePower3y*iv0z - coeffV3ePower1y*iv1x + coeffV3ePower2z*iv1x + coeffV3ePower1x*iv1y - coeffV3ePower3z*iv1y - coeffV3ePower2x*iv1z + coeffV3ePower3y*iv1z;
 
if(sgn(ans_5) != 0) return sgn(ans_5);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_6 = coeffV3ePower2y*iv0x - coeffV3ePower3z*iv0x - coeffV3ePower2x*iv0y + coeffV3ePower3x*iv0z - coeffV3ePower2y*iv1x + coeffV3ePower3z*iv1x + coeffV3ePower2x*iv1y - coeffV3ePower3x*iv1z;
 
if(sgn(ans_6) != 0) return sgn(ans_6);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_7 = coeffV3ePower3y*iv0x - coeffV3ePower3x*iv0y - coeffV3ePower3y*iv1x + coeffV3ePower3x*iv1y;
 
if(sgn(ans_7) != 0) return sgn(ans_7);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1110(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y + coeffV3ePower0z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + coeffV3ePower0y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower0x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv1y) + iv0y*iv1z + iv0z*iv2y - iv1z*iv2y + coeffV3ePower1z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) - iv0y*iv2z + iv1y*iv2z + coeffV3ePower1y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower1x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv1x - iv0x*iv1z - iv0z*iv2x + iv1z*iv2x + coeffV3ePower2z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + iv0x*iv2z - iv1x*iv2z + coeffV3ePower2y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower2x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv1x) + iv0x*iv1y + iv0y*iv2x - iv1y*iv2x - iv0x*iv2y + iv1x*iv2y + coeffV3ePower3z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower3y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower3x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int SosPredicatesImpl::orient3D_1111(const InputVertex &v0, const InputVertex &v1, const InputVertex &v2, const VertexFromIntersection &v3) const{


/*****************************************************/
const VertCoord &iv0x = getCoordinates(v0)[0];
const VertCoord &iv0y = getCoordinates(v0)[1];
const VertCoord &iv0z = getCoordinates(v0)[2];
const VertCoord &iv1x = getCoordinates(v1)[0];
const VertCoord &iv1y = getCoordinates(v1)[1];
const VertCoord &iv1z = getCoordinates(v1)[2];
const VertCoord &iv2x = getCoordinates(v2)[0];
const VertCoord &iv2y = getCoordinates(v2)[1];
const VertCoord &iv2z = getCoordinates(v2)[2];
/*****************************************************/
VertCoord coeffV3ePower0x = getEpsCoefficientsVertexFromIntersection(v3, 0, 0);
VertCoord coeffV3ePower1x = getEpsCoefficientsVertexFromIntersection(v3, 1, 0);
VertCoord coeffV3ePower2x = getEpsCoefficientsVertexFromIntersection(v3, 2, 0);
VertCoord coeffV3ePower3x = getEpsCoefficientsVertexFromIntersection(v3, 3, 0);
VertCoord coeffV3ePower0y = getEpsCoefficientsVertexFromIntersection(v3, 0, 1);
VertCoord coeffV3ePower1y = getEpsCoefficientsVertexFromIntersection(v3, 1, 1);
VertCoord coeffV3ePower2y = getEpsCoefficientsVertexFromIntersection(v3, 2, 1);
VertCoord coeffV3ePower3y = getEpsCoefficientsVertexFromIntersection(v3, 3, 1);
VertCoord coeffV3ePower0z = getEpsCoefficientsVertexFromIntersection(v3, 0, 2);
VertCoord coeffV3ePower1z = getEpsCoefficientsVertexFromIntersection(v3, 1, 2);
VertCoord coeffV3ePower2z = getEpsCoefficientsVertexFromIntersection(v3, 2, 2);
VertCoord coeffV3ePower3z = getEpsCoefficientsVertexFromIntersection(v3, 3, 2);


/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_1 = -(iv0z*iv1y*iv2x) + iv0y*iv1z*iv2x + iv0z*iv1x*iv2y - iv0x*iv1z*iv2y + coeffV3ePower0z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) - iv0y*iv1x*iv2z + iv0x*iv1y*iv2z + coeffV3ePower0y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower0x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_1) != 0) return sgn(ans_1);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_2 = -(iv0z*iv1y) + iv0y*iv1z + iv0z*iv2y - iv1z*iv2y + coeffV3ePower1z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) - iv0y*iv2z + iv1y*iv2z + coeffV3ePower1y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower1x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_2) != 0) return sgn(ans_2);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_3 = iv0z*iv1x - iv0x*iv1z - iv0z*iv2x + iv1z*iv2x + coeffV3ePower2z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + iv0x*iv2z - iv1x*iv2z + coeffV3ePower2y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower2x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_3) != 0) return sgn(ans_3);

/*****************************************************/
/*****************************************************/
/*****************************************************/
/*****************************************************/
VertCoord ans_4 = -(iv0y*iv1x) + iv0x*iv1y + iv0y*iv2x - iv1y*iv2x - iv0x*iv2y + iv1x*iv2y + coeffV3ePower3z*(iv0y*iv1x - iv0x*iv1y - iv0y*iv2x + iv1y*iv2x + iv0x*iv2y - iv1x*iv2y) + coeffV3ePower3y*(-(iv0z*iv1x) + iv0x*iv1z + iv0z*iv2x - iv1z*iv2x - iv0x*iv2z + iv1x*iv2z) + coeffV3ePower3x*(iv0z*iv1y - iv0y*iv1z - iv0z*iv2y + iv1z*iv2y + iv0y*iv2z - iv1y*iv2z);
 
if(sgn(ans_4) != 0) return sgn(ans_4);

/*****************************************************/
/*****************************************************/


 return 0; 

 } 
